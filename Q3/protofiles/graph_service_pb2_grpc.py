# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import protofiles.graph_service_pb2 as graph__service__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in graph_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class GraphServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SubmitGraph = channel.unary_unary(
                '/graph.GraphService/SubmitGraph',
                request_serializer=graph__service__pb2.SubmitGraphRequest.SerializeToString,
                response_deserializer=graph__service__pb2.SubmitGraphResponse.FromString,
                _registered_method=True)
        self.HasIndependentSet = channel.unary_unary(
                '/graph.GraphService/HasIndependentSet',
                request_serializer=graph__service__pb2.QueryK.SerializeToString,
                response_deserializer=graph__service__pb2.BoolReply.FromString,
                _registered_method=True)
        self.HasMatching = channel.unary_unary(
                '/graph.GraphService/HasMatching',
                request_serializer=graph__service__pb2.QueryK.SerializeToString,
                response_deserializer=graph__service__pb2.BoolReply.FromString,
                _registered_method=True)
        self.Reset = channel.unary_unary(
                '/graph.GraphService/Reset',
                request_serializer=graph__service__pb2.ResetRequest.SerializeToString,
                response_deserializer=graph__service__pb2.ResetResponse.FromString,
                _registered_method=True)


class GraphServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SubmitGraph(self, request, context):
        """Upload/replace a client's graph. Safe to call at any time (async arrivals).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HasIndependentSet(self, request, context):
        """True if the union graph has an independent set of size >= k.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HasMatching(self, request, context):
        """True if the union graph has a matching of size >= k.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Reset(self, request, context):
        """Optional convenience: clears all stored client graphs.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GraphServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SubmitGraph': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitGraph,
                    request_deserializer=graph__service__pb2.SubmitGraphRequest.FromString,
                    response_serializer=graph__service__pb2.SubmitGraphResponse.SerializeToString,
            ),
            'HasIndependentSet': grpc.unary_unary_rpc_method_handler(
                    servicer.HasIndependentSet,
                    request_deserializer=graph__service__pb2.QueryK.FromString,
                    response_serializer=graph__service__pb2.BoolReply.SerializeToString,
            ),
            'HasMatching': grpc.unary_unary_rpc_method_handler(
                    servicer.HasMatching,
                    request_deserializer=graph__service__pb2.QueryK.FromString,
                    response_serializer=graph__service__pb2.BoolReply.SerializeToString,
            ),
            'Reset': grpc.unary_unary_rpc_method_handler(
                    servicer.Reset,
                    request_deserializer=graph__service__pb2.ResetRequest.FromString,
                    response_serializer=graph__service__pb2.ResetResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'graph.GraphService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('graph.GraphService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class GraphService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SubmitGraph(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/graph.GraphService/SubmitGraph',
            graph__service__pb2.SubmitGraphRequest.SerializeToString,
            graph__service__pb2.SubmitGraphResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HasIndependentSet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/graph.GraphService/HasIndependentSet',
            graph__service__pb2.QueryK.SerializeToString,
            graph__service__pb2.BoolReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HasMatching(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/graph.GraphService/HasMatching',
            graph__service__pb2.QueryK.SerializeToString,
            graph__service__pb2.BoolReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Reset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/graph.GraphService/Reset',
            graph__service__pb2.ResetRequest.SerializeToString,
            graph__service__pb2.ResetResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
